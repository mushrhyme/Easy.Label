{"ast":null,"code":"// import {\n//   Streamlit,\n//   withStreamlitConnection,\n//   ComponentProps\n// } from \"streamlit-component-lib\"\n// import React, { useEffect, useState, useRef } from \"react\"\n// import { ChakraProvider, Input, Box, HStack, VStack, Center, Button, Text, Flex } from '@chakra-ui/react'\n// import { extendTheme } from '@chakra-ui/react';\n// import useImage from 'use-image';\n// import BBoxCanvas from \"./BBoxCanvas\";\n// import debounce from 'lodash/debounce';\n// const theme = extendTheme({\n//   config: {\n//     initialColorMode: 'light',\n//     useSystemColorMode: false,\n//   },\n// });\n// export interface PythonArgs {\n//   image_url: string,\n//   image_size: number[],\n//   bbox_info: any[],\n//   color_map: any,\n//   line_width: number,\n//   use_space: boolean,\n//   ocr_suggestions: string[]\n// }\n// interface Rectangle {\n//   x: number;\n//   y: number;\n//   width: number;\n//   height: number;\n//   label: string;\n//   stroke: string;\n//   id: string;\n// }\n// // 공통 bbox 포맷터 함수\n// const formatBBoxes = (rects: Rectangle[]) =>\n//   rects.map((rect) => ({\n//     box_id: rect.id,\n//     bbox: [rect.x, rect.y, rect.width, rect.height],\n//     label: rect.label || \"\",\n//   }));\n// const Detection = ({ args }: ComponentProps) => {\n//   const {\n//     image_url,\n//     image_size,\n//     bbox_info,\n//     color_map,\n//     line_width,\n//     use_space,\n//     ocr_suggestions\n//   }: PythonArgs = args\n//   const params = new URLSearchParams(window.location.search);\n//   const baseUrl = params.get('streamlitUrl')\n//   const [image] = useImage(baseUrl + image_url)\n//   const [rectangles, setRectangles] = useState<Rectangle[]>(\n//     bbox_info.map((bb, i) => ({\n//       x: bb.bbox[0],\n//       y: bb.bbox[1],\n//       width: bb.bbox[2],\n//       height: bb.bbox[3],\n//       label: bb.label,\n//       stroke: \"#39FF14\",\n//       id: 'bbox-' + i\n//     }))\n//   );\n//   const [selectedId, setSelectedId] = useState<string | null>(null);\n//   const [label, setLabel] = useState(\"\"); \n//   const [mode, setMode] = useState<string>('Draw');\n//   const [isLabelEditMode, setIsLabelEditMode] = useState(false);\n//   const [scale, setScale] = useState(1.0);\n//   const [saveNotification, setSaveNotification] = useState(false);\n//   const [showLabels, setShowLabels] = useState(false);\n//   const [suggestedLabels, setSuggestedLabels] = useState<string[]>([]);\n//   const [isLoadingLabels, setIsLoadingLabels] = useState(false);\n//   const [showSuggestions, setShowSuggestions] = useState(false);\n//   const pendingOCRRequestRef = useRef(false);\n//   const [ocrTrigger, setOcrTrigger] = useState<string | null>(null);\n//   const prevTriggerRef = useRef<string | null>(null);\n//   useEffect(() => {\n//     if (\n//       ocr_suggestions && \n//       ocr_suggestions.length > 0 &&\n//       JSON.stringify(ocr_suggestions) !== JSON.stringify(suggestedLabels)\n//     ) {\n//       console.log(\"📥 OCR 응답 수신:\", ocr_suggestions);\n//       setSuggestedLabels(ocr_suggestions);\n//       setIsLoadingLabels(false);\n//       setShowSuggestions(true);\n//       pendingOCRRequestRef.current = false; // ✅ OCR 응답 도착 시 요청 가능 상태로 복구\n//     }\n//   }, [ocr_suggestions]);\n//   const sendStateToStreamlit = (currentMode: string, boxesData: Rectangle[], currentScale: number, selectedBoxId: string | null = null) => {\n//     console.log(\"📤 sendStateToStreamlit 호출됨\", {\n//       mode: currentMode,\n//       request_ocr: false,\n//       selected_box_id: selectedBoxId\n//     });\n//     if (pendingOCRRequestRef.current) return; // 🔒 OCR 중이면 skip\n//     const currentBboxValue = formatBBoxes(boxesData);\n//     if (selectedBoxId !== null) {\n//       const selectedBox = boxesData.find(box => box.id === selectedBoxId);\n//       if (!selectedBox) return;\n//       Streamlit.setComponentValue({\n//         mode: currentMode,\n//         bboxes: currentBboxValue,\n//         scale: currentScale,\n//         save_requested: false,\n//         request_ocr: false,\n//         selected_box_id: selectedBoxId,\n//         selected_box_coords: [selectedBox.x, selectedBox.y, selectedBox.width, selectedBox.height]\n//       });\n//     } else {\n//       Streamlit.setComponentValue({\n//         mode: currentMode,\n//         bboxes: currentBboxValue,\n//         scale: currentScale,\n//         save_requested: false\n//       });\n//     }\n//   };\n//   console.log(\"🔒 pendingOCRRequestRef 상태:\", pendingOCRRequestRef.current);\n//   useEffect(() => {\n//     const onDataFromPython = (event: MessageEvent) => {\n//       if (event.data.type === 'streamlit:render') {\n//         try {\n//           const args = event.data.args;\n//           if (args?.ocr_suggestions && Array.isArray(args.ocr_suggestions)) {\n//             console.log(\"📥 OCR 응답 수신:\", args.ocr_suggestions);\n//             setSuggestedLabels(args.ocr_suggestions);\n//             setIsLoadingLabels(false);\n//             setShowSuggestions(true);\n//             pendingOCRRequestRef.current = false;\n//           }\n//         } catch (error) {\n//           console.error(\"❌ OCR 응답 처리 중 오류:\", error);\n//           pendingOCRRequestRef.current = false;\n//         }\n//       }\n//     };\n//     window.addEventListener('message', onDataFromPython);\n//     return () => window.removeEventListener('message', onDataFromPython);\n//   }, []);\n//   useEffect(() => {\n//     if (selectedId) {\n//       const selectedRect = rectangles.find(rect => rect.id === selectedId);\n//       if (selectedRect) {\n//         setLabel(selectedRect.label);\n//       }\n//     }\n//   }, [selectedId, rectangles]);\n//   const handleLabelInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     const newLabel = event.target.value;\n//     setLabel(newLabel);\n//     if (selectedId !== null) {\n//       setRectangles((prev) =>\n//         prev.map((rect) =>\n//           rect.id === selectedId ? { ...rect, label: newLabel, stroke: \"#39FF14\" } : rect\n//         )\n//       );\n//     }\n//   };\n//   useEffect(() => {\n//     const initializeScale = () => {\n//       if (scale === 1.0 && image_size[0] > 0) {\n//         const scale_ratio = window.innerWidth * 0.8 / image_size[0];\n//         setScale(Math.min(scale_ratio, 1.0));\n//       }\n//     };\n//     const updateFrameHeight = () => {\n//       if (image_size[1] > 0) {\n//         Streamlit.setFrameHeight(image_size[1] * scale + 100);\n//       }\n//     };\n//     initializeScale();\n//     updateFrameHeight();\n//     window.addEventListener('resize', updateFrameHeight);\n//     return () => {\n//       window.removeEventListener('resize', updateFrameHeight);\n//     };\n//   }, [image_size, scale]);\n//   useEffect(() => {\n//     const handleKeyPress = (event: KeyboardEvent) => {\n//       if (use_space && event.code === \"Space\") {\n//         sendStateToStreamlit(mode, rectangles, scale);  \n//       }\n//       if (event.ctrlKey && event.code === \"KeyE\") {\n//         event.preventDefault();\n//         setMode(\"Edit\");\n//       }\n//       if (event.ctrlKey && event.code === \"KeyD\") {\n//         event.preventDefault();\n//         setMode(\"Draw\");\n//       }\n//       if (event.ctrlKey && event.code === \"KeyL\") {\n//         event.preventDefault();\n//         if (selectedId) {\n//           setIsLabelEditMode(true);\n//           setShowSuggestions(true);\n//           setIsLoadingLabels(false);\n//         }\n//       }\n//       if (event.ctrlKey && event.code === \"KeyM\") {\n//         event.preventDefault();\n//         if (selectedId) {\n//           console.log(\"🆕 Ctrl+M pressed → OCR 요청 트리거\");\n//           setIsLoadingLabels(true);\n//           setOcrTrigger(selectedId);  // 👈 여기서만 트리거\n//         }\n//       }\n//       if (event.ctrlKey && event.code === \"KeyR\") {\n//         event.preventDefault();\n//         setShowLabels(prev => !prev);\n//       }\n//       if (event.ctrlKey && event.code === \"KeyS\") {\n//         event.preventDefault();\n//         setSaveNotification(true);\n//         setTimeout(() => {\n//           setSaveNotification(false);\n//         }, 3000);\n//         Streamlit.setComponentValue({\n//           mode,\n//           bboxes: formatBBoxes(rectangles),\n//           scale,\n//           save_requested: true\n//         });\n//       }\n//       if (event.code === \"Delete\" && selectedId) {\n//         event.preventDefault();\n//         setRectangles((prev) => prev.filter((rect) => rect.id !== selectedId));\n//         setSelectedId(null);\n//         setIsLabelEditMode(false);\n//       }\n//       if (event.code === \"Escape\") {\n//         event.preventDefault();\n//         if (isLabelEditMode) {\n//           setIsLabelEditMode(false);\n//         } else if (selectedId) {\n//           setSelectedId(null);\n//         }\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyPress);\n//     return () => {\n//       window.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [rectangles, use_space, selectedId, isLabelEditMode, mode]);\n//   useEffect(() => {\n//     const handleWheel = (event: WheelEvent) => {\n//       if (event.ctrlKey) {\n//         event.preventDefault();\n//         let newScale = scale + (event.deltaY < 0 ? 0.1 : -0.1);\n//         newScale = Math.min(Math.max(newScale, 0.5), 3.0);\n//         setScale(newScale);\n//       }\n//     };\n//     window.addEventListener('wheel', handleWheel, { passive: false, capture: true });\n//   }, [scale]);\n//   const formatScale = (scale: number) => `${Math.round(scale * 100)}%`;\n//   const handleModeChange = (newMode: string) => {\n//     setMode(newMode);\n//     sendStateToStreamlit(newMode, rectangles, scale);\n//   };\n//   const handleSuggestionSelect = (suggestedLabel: string) => {\n//     setLabel(suggestedLabel);\n//     if (selectedId !== null) {\n//       setRectangles((prev) =>\n//         prev.map((rect) =>\n//           rect.id === selectedId ? { ...rect, label: suggestedLabel, stroke: \"#39FF14\" } : rect\n//         )\n//       );\n//     }\n//     setShowSuggestions(false);\n//   };\n//   useEffect(() => {\n//     if (!ocrTrigger || ocrTrigger === prevTriggerRef.current) return;\n//     prevTriggerRef.current = ocrTrigger;\n//     const selectedBox = rectangles.find(rect => rect.id === ocrTrigger);\n//     if (!selectedBox) return;\n//     if (pendingOCRRequestRef.current) {\n//       console.log(\"🔁 이미 OCR 요청 중입니다. 요청 무시됨.\");\n//       return;\n//     }\n//     console.log(\"📤 OCR 요청 실행:\", ocrTrigger);\n//     pendingOCRRequestRef.current = true;\n//     Streamlit.setComponentValue({\n//       mode,\n//       bboxes: formatBBoxes(rectangles),\n//       scale,\n//       request_ocr: true,\n//       selected_box_id: ocrTrigger,\n//       selected_box_coords: [selectedBox.x, selectedBox.y, selectedBox.width, selectedBox.height]\n//     });\n//     // 요청 후 트리거 리셋\n//     setOcrTrigger(null);\n//   }, [ocrTrigger]);\n//   return (\n//     <ChakraProvider theme={theme}>\n//       <VStack spacing={4} align=\"stretch\">\n//         {saveNotification && (\n//           <Box \n//             p={3} \n//             bg=\"green.100\" \n//             color=\"green.800\" \n//             borderRadius=\"md\" \n//             position=\"fixed\" \n//             top=\"20px\" \n//             left=\"50%\" \n//             transform=\"translateX(-50%)\" \n//             zIndex={100}\n//             boxShadow=\"md\"\n//           >\n//             <Text fontWeight=\"bold\">\n//               <span role=\"img\" aria-label=\"save\">💾</span> 어노테이션 저장 요청이 전송되었습니다!\n//             </Text>\n//           </Box>\n//         )}\n//         <Box \n//           p={3} \n//           bg=\"gray.200\" \n//           borderRadius=\"md\" \n//           position=\"sticky\" \n//           top={0} \n//           zIndex={10}\n//           borderWidth=\"1px\"\n//           boxShadow=\"sm\"\n//         >\n//           <Flex justifyContent=\"space-between\" alignItems=\"center\">\n//             <HStack spacing={4}>\n//               <Box>\n//                 <Text fontSize=\"sm\" mb={1} color=\"black\">Class</Text>\n//                 <Input \n//                   value={label} \n//                   onChange={handleLabelInputChange} \n//                   placeholder=\"Enter label\"\n//                   size=\"sm\"\n//                   width=\"200px\"\n//                   bg=\"white\"\n//                   borderColor=\"gray.200\"\n//                 />\n//               </Box>\n//             </HStack>\n//             <HStack>\n//               <Text fontSize=\"sm\" mr={2} color=\"black\">Zoom: {formatScale(scale)}</Text>\n//               <Button size=\"sm\" colorScheme=\"teal\" variant={showLabels ? \"solid\" : \"outline\"} onClick={() => setShowLabels(prev => !prev)}>\n//                 {showLabels ? \"Hide Labels\" : \"Show Labels\"}\n//               </Button>\n//               <Button size=\"sm\" colorScheme=\"green\" variant={mode === \"Draw\" ? \"solid\" : \"outline\"} onClick={() => handleModeChange(\"Draw\")}>\n//                 Draw\n//               </Button>\n//               <Button size=\"sm\" colorScheme=\"blue\" variant={mode === \"Edit\" ? \"solid\" : \"outline\"} onClick={() => handleModeChange(\"Edit\")}>\n//                 Edit\n//               </Button>\n//               <Button size=\"sm\" colorScheme=\"purple\" onClick={() => {\n//                 setSaveNotification(true);\n//                 setTimeout(() => setSaveNotification(false), 3000);\n//                 Streamlit.setComponentValue({\n//                   mode,\n//                   bboxes: formatBBoxes(rectangles),\n//                   scale,\n//                   save_requested: true\n//                 });\n//               }}>\n//                 Save\n//               </Button>\n//             </HStack>\n//           </Flex>\n//           <Flex mt={2} justifyContent=\"space-between\" alignItems=\"center\">\n//             <Text fontSize=\"xs\" color=\"black\">Selected Items: {rectangles.length}</Text>\n//           </Flex>\n//         </Box>\n//         <Box>\n//           <Center>\n//             <BBoxCanvas\n//               rectangles={rectangles}\n//               mode={mode}\n//               selectedId={selectedId}\n//               scale={scale}\n//               setSelectedId={setSelectedId}\n//               setRectangles={setRectangles}\n//               setLabel={setLabel}\n//               color_map={color_map}\n//               label={label}\n//               image={image}\n//               image_size={image_size}\n//               strokeWidth={line_width}\n//               isLabelEditMode={isLabelEditMode}\n//               setIsLabelEditMode={setIsLabelEditMode}\n//               handleLabelInputChange={handleLabelInputChange}\n//               showLabels={showLabels}\n//               suggestedLabels={suggestedLabels}\n//               showSuggestions={showSuggestions}\n//               setShowSuggestions={setShowSuggestions}\n//               handleSuggestionSelect={handleSuggestionSelect}\n//               isLoadingLabels={isLoadingLabels}\n//             />\n//           </Center>\n//         </Box>\n//       </VStack>\n//     </ChakraProvider>\n//   );\n// };\n// export default withStreamlitConnection(Detection);\n// ✅ Detection.tsx 최종 버전 (무한 루프 방지 + 수동 상태 전송 적용)\nimport{Streamlit,withStreamlitConnection}from\"streamlit-component-lib\";import React,{useEffect,useState}from\"react\";import{ChakraProvider,Input,Box,HStack,VStack,Center,Button,Text,Flex}from'@chakra-ui/react';import{extendTheme}from'@chakra-ui/react';import useImage from'use-image';import BBoxCanvas from\"./BBoxCanvas\";// 상단 import에 추가\nimport{useOcrManager}from\"./useOcrManager\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const theme=extendTheme({config:{initialColorMode:'light',useSystemColorMode:false}});const formatBBoxes=rects=>rects.map(rect=>({box_id:rect.id,bbox:[rect.x,rect.y,rect.width,rect.height],label:rect.label||\"\"}));const Detection=_ref=>{let{args}=_ref;const{image_url,image_size,bbox_info,color_map,line_width,use_space,ocr_suggestions}=args;const params=new URLSearchParams(window.location.search);const baseUrl=params.get('streamlitUrl');const[image]=useImage(baseUrl+image_url);const[rectangles,setRectangles]=useState(bbox_info.map((bb,i)=>({x:bb.bbox[0],y:bb.bbox[1],width:bb.bbox[2],height:bb.bbox[3],label:bb.label,stroke:\"#39FF14\",id:'bbox-'+i})));const[selectedId,setSelectedId]=useState(null);const[label,setLabel]=useState(\"\");const[mode,setMode]=useState('Draw');const[isLabelEditMode,setIsLabelEditMode]=useState(false);const[scale,setScale]=useState(1.0);const[saveNotification,setSaveNotification]=useState(false);const[showLabels,setShowLabels]=useState(false);// const [suggestedLabels, setSuggestedLabels] = useState<string[]>([]);\n// const [isLoadingLabels, setIsLoadingLabels] = useState(false);\n// const [showSuggestions, setShowSuggestions] = useState(false);\n// 컴포넌트 내부에서 훅 호출\nconst{requestOcrForBox,handleOcrResponse,resetOcrState,suggestedLabels,showSuggestions,isLoading:isLoadingLabels,setShowSuggestions}=useOcrManager({rectangles,scale,mode});// const pendingOCRRequestRef = useRef(false);\n// const [ocrTrigger, setOcrTrigger] = useState<string | null>(null);\n// const prevTriggerRef = useRef<string | null>(null);\n// const sendStateToStreamlit = (currentMode: string, boxesData: Rectangle[], currentScale: number, selectedBoxId: string | null = null) => {\n//   if (pendingOCRRequestRef.current) return;\n//   const currentBboxValue = formatBBoxes(boxesData);\n//   const payload: any = {\n//     mode: currentMode,\n//     bboxes: currentBboxValue,\n//     scale: currentScale,\n//     save_requested: false,\n//     request_ocr: false\n//   };\n//   if (selectedBoxId !== null) {\n//     const selectedBox = boxesData.find(box => box.id === selectedBoxId);\n//     if (selectedBox) {\n//       payload.selected_box_id = selectedBoxId;\n//       payload.selected_box_coords = [\n//         selectedBox.x,\n//         selectedBox.y,\n//         selectedBox.width,\n//         selectedBox.height\n//       ];\n//     }\n//   }\n//   Streamlit.setComponentValue(payload);\n// };\nconst sendStateToStreamlit=function(currentMode,boxesData,currentScale){let selectedBoxId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;const currentBboxValue=formatBBoxes(boxesData);const payload={mode:currentMode,bboxes:currentBboxValue,scale:currentScale,save_requested:false,request_ocr:false};if(selectedBoxId!==null){const selectedBox=boxesData.find(box=>box.id===selectedBoxId);if(selectedBox){payload.selected_box_id=selectedBoxId;payload.selected_box_coords=[selectedBox.x,selectedBox.y,selectedBox.width,selectedBox.height];}}Streamlit.setComponentValue(payload);};const triggerStateSend=()=>{sendStateToStreamlit(mode,rectangles,scale,selectedId);};// useEffect(() => {\n//   if (\n//     ocr_suggestions &&\n//     ocr_suggestions.length > 0 &&\n//     JSON.stringify(ocr_suggestions) !== JSON.stringify(suggestedLabels)\n//   ) {\n//     setSuggestedLabels(ocr_suggestions);\n//     setIsLoadingLabels(false);\n//     setShowSuggestions(true);\n//     // pendingOCRRequestRef.current = false;\n//     // setOcrTrigger(null); // ✅ 혹시라도 다시 반복되는 걸 방지\n//   }\n// }, [ocr_suggestions]);\nuseEffect(()=>{if(args.ocr_suggestions&&args.ocr_suggestions.length>0){handleOcrResponse(args.ocr_suggestions);}},[args.ocr_suggestions]);useEffect(()=>{const onDataFromPython=event=>{if(event.data.type==='streamlit:render'){try{const args=event.data.args;if(args!==null&&args!==void 0&&args.ocr_suggestions&&Array.isArray(args.ocr_suggestions)){setSuggestedLabels(args.ocr_suggestions);setIsLoadingLabels(false);setShowSuggestions(true);// pendingOCRRequestRef.current = false;\n}}catch(error){// pendingOCRRequestRef.current = false;\n}}};window.addEventListener('message',onDataFromPython);return()=>window.removeEventListener('message',onDataFromPython);},[]);// useEffect(() => {\n//   if (!ocrTrigger || ocrTrigger === prevTriggerRef.current) return;\n//   prevTriggerRef.current = ocrTrigger;\n//   const selectedBox = rectangles.find(rect => rect.id === ocrTrigger);\n//   if (!selectedBox) return;\n//   if (pendingOCRRequestRef.current) return;\n//   pendingOCRRequestRef.current = true;\n//   Streamlit.setComponentValue({\n//     mode,\n//     bboxes: formatBBoxes(rectangles),\n//     scale,\n//     request_ocr: true,\n//     selected_box_id: ocrTrigger,\n//     selected_box_coords: [\n//       selectedBox.x,\n//       selectedBox.y,\n//       selectedBox.width,\n//       selectedBox.height\n//     ]\n//   });\n//   // ✅ 트리거 초기화 반드시 포함\n//   setOcrTrigger(null);\n//   prevTriggerRef.current = null;\n// }, [ocrTrigger]);\n// useEffect(() => {\n//   console.log(\"🔍 [useEffect] args.request_ocr =\", args.request_ocr);\n//   if (args.request_ocr === false || args.request_ocr === undefined) {\n//     pendingOCRRequestRef.current = false;\n//     prevTriggerRef.current = null;       // ✅ OCR 재트리거 방지\n//     setOcrTrigger(null);                 // ✅ OCR 트리거도 초기화\n//     console.log(\"🧹 OCR 요청 상태 리셋\");\n//   }\n// }, [args.request_ocr]);\nuseEffect(()=>{if(args.request_ocr===false||args.request_ocr===undefined){resetOcrState();}},[args.request_ocr]);useEffect(()=>{if(selectedId){const selectedRect=rectangles.find(rect=>rect.id===selectedId);if(selectedRect){setLabel(selectedRect.label);}}},[selectedId,rectangles]);const handleLabelInputChange=event=>{const newLabel=event.target.value;setLabel(newLabel);if(selectedId!==null){setRectangles(prev=>prev.map(rect=>rect.id===selectedId?{...rect,label:newLabel,stroke:\"#39FF14\"}:rect));}};useEffect(()=>{const initializeScale=()=>{if(scale===1.0&&image_size[0]>0){const scale_ratio=window.innerWidth*0.8/image_size[0];setScale(Math.min(scale_ratio,1.0));}};const updateFrameHeight=()=>{if(image_size[1]>0){Streamlit.setFrameHeight(image_size[1]*scale+100);}};initializeScale();updateFrameHeight();window.addEventListener('resize',updateFrameHeight);return()=>{window.removeEventListener('resize',updateFrameHeight);};},[image_size,scale]);useEffect(()=>{const handleKeyPress=event=>{if(use_space&&event.code===\"Space\"){triggerStateSend();}if(event.ctrlKey&&event.code===\"KeyE\"){event.preventDefault();setMode(\"Edit\");triggerStateSend();}if(event.ctrlKey&&event.code===\"KeyD\"){event.preventDefault();setMode(\"Draw\");triggerStateSend();}if(event.ctrlKey&&event.code===\"KeyL\"){event.preventDefault();if(selectedId){setIsLabelEditMode(true);setShowSuggestions(true);setIsLoadingLabels(false);}}if(event.ctrlKey&&event.code===\"KeyM\"){event.preventDefault();if(selectedId){requestOcrForBox(selectedId);}}if(event.ctrlKey&&event.code===\"KeyR\"){event.preventDefault();setShowLabels(prev=>!prev);}if(event.ctrlKey&&event.code===\"KeyS\"){event.preventDefault();setSaveNotification(true);setTimeout(()=>{setSaveNotification(false);},3000);Streamlit.setComponentValue({mode,bboxes:formatBBoxes(rectangles),scale,save_requested:true});}if(event.code===\"Delete\"&&selectedId){event.preventDefault();setRectangles(prev=>prev.filter(rect=>rect.id!==selectedId));setSelectedId(null);setIsLabelEditMode(false);}if(event.code===\"Escape\"){event.preventDefault();if(isLabelEditMode){setIsLabelEditMode(false);}else if(selectedId){setSelectedId(null);}}};window.addEventListener(\"keydown\",handleKeyPress);return()=>{window.removeEventListener(\"keydown\",handleKeyPress);};},[rectangles,use_space,selectedId,isLabelEditMode,mode]);useEffect(()=>{const handleWheel=event=>{if(event.ctrlKey){event.preventDefault();let newScale=scale+(event.deltaY<0?0.1:-0.1);newScale=Math.min(Math.max(newScale,0.5),3.0);setScale(newScale);}};window.addEventListener('wheel',handleWheel,{passive:false,capture:true});return()=>{window.removeEventListener('wheel',handleWheel);};},[scale]);const formatScale=scale=>`${Math.round(scale*100)}%`;const handleModeChange=newMode=>{setMode(newMode);triggerStateSend();};const handleSuggestionSelect=suggestedLabel=>{setLabel(suggestedLabel);if(selectedId!==null){setRectangles(prev=>prev.map(rect=>rect.id===selectedId?{...rect,label:suggestedLabel,stroke:\"#39FF14\"}:rect));}setShowSuggestions(false);};useEffect(()=>{console.log(\"🔍 [args.request_ocr] =\",args.request_ocr);},[args.request_ocr]);return/*#__PURE__*/_jsx(ChakraProvider,{theme:theme,children:/*#__PURE__*/_jsxs(VStack,{spacing:4,align:\"stretch\",children:[saveNotification&&/*#__PURE__*/_jsx(Box,{p:3,bg:\"green.100\",color:\"green.800\",borderRadius:\"md\",position:\"fixed\",top:\"20px\",left:\"50%\",transform:\"translateX(-50%)\",zIndex:100,boxShadow:\"md\",children:/*#__PURE__*/_jsx(Text,{fontWeight:\"bold\",children:\"\\uD83D\\uDCBE \\uC5B4\\uB178\\uD14C\\uC774\\uC158 \\uC800\\uC7A5 \\uC694\\uCCAD\\uC774 \\uC804\\uC1A1\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4!\"})}),/*#__PURE__*/_jsxs(Box,{p:3,bg:\"gray.200\",borderRadius:\"md\",position:\"sticky\",top:0,zIndex:10,borderWidth:\"1px\",boxShadow:\"sm\",children:[/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(HStack,{spacing:4,children:/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"sm\",mb:1,color:\"black\",children:\"Class\"}),/*#__PURE__*/_jsx(Input,{value:label,onChange:handleLabelInputChange,placeholder:\"Enter label\",size:\"sm\",width:\"200px\",bg:\"white\",borderColor:\"gray.200\"})]})}),/*#__PURE__*/_jsxs(HStack,{children:[/*#__PURE__*/_jsxs(Text,{fontSize:\"sm\",mr:2,color:\"black\",children:[\"Zoom: \",formatScale(scale)]}),/*#__PURE__*/_jsx(Button,{size:\"sm\",colorScheme:\"teal\",variant:showLabels?\"solid\":\"outline\",onClick:()=>setShowLabels(prev=>!prev),children:showLabels?\"Hide Labels\":\"Show Labels\"}),/*#__PURE__*/_jsx(Button,{size:\"sm\",colorScheme:\"green\",variant:mode===\"Draw\"?\"solid\":\"outline\",onClick:()=>handleModeChange(\"Draw\"),children:\"Draw\"}),/*#__PURE__*/_jsx(Button,{size:\"sm\",colorScheme:\"blue\",variant:mode===\"Edit\"?\"solid\":\"outline\",onClick:()=>handleModeChange(\"Edit\"),children:\"Edit\"}),/*#__PURE__*/_jsx(Button,{size:\"sm\",colorScheme:\"purple\",onClick:()=>{setSaveNotification(true);setTimeout(()=>setSaveNotification(false),3000);Streamlit.setComponentValue({mode,bboxes:formatBBoxes(rectangles),scale,save_requested:true});},children:\"Save\"})]})]}),/*#__PURE__*/_jsx(Flex,{mt:2,justifyContent:\"space-between\",alignItems:\"center\",children:/*#__PURE__*/_jsxs(Text,{fontSize:\"xs\",color:\"black\",children:[\"Selected Items: \",rectangles.length]})})]}),/*#__PURE__*/_jsx(Box,{children:/*#__PURE__*/_jsx(Center,{children:/*#__PURE__*/_jsx(BBoxCanvas,{rectangles:rectangles,mode:mode,selectedId:selectedId,scale:scale,setSelectedId:setSelectedId,setRectangles:setRectangles,setLabel:setLabel,color_map:color_map,label:label,image:image,image_size:image_size,strokeWidth:line_width,isLabelEditMode:isLabelEditMode,setIsLabelEditMode:setIsLabelEditMode,handleLabelInputChange:handleLabelInputChange,showLabels:showLabels,suggestedLabels:suggestedLabels,showSuggestions:showSuggestions,setShowSuggestions:setShowSuggestions,handleSuggestionSelect:handleSuggestionSelect,isLoadingLabels:isLoadingLabels})})})]})});};export default withStreamlitConnection(Detection);","map":{"version":3,"names":["Streamlit","withStreamlitConnection","React","useEffect","useState","ChakraProvider","Input","Box","HStack","VStack","Center","Button","Text","Flex","extendTheme","useImage","BBoxCanvas","useOcrManager","jsx","_jsx","jsxs","_jsxs","theme","config","initialColorMode","useSystemColorMode","formatBBoxes","rects","map","rect","box_id","id","bbox","x","y","width","height","label","Detection","_ref","args","image_url","image_size","bbox_info","color_map","line_width","use_space","ocr_suggestions","params","URLSearchParams","window","location","search","baseUrl","get","image","rectangles","setRectangles","bb","i","stroke","selectedId","setSelectedId","setLabel","mode","setMode","isLabelEditMode","setIsLabelEditMode","scale","setScale","saveNotification","setSaveNotification","showLabels","setShowLabels","requestOcrForBox","handleOcrResponse","resetOcrState","suggestedLabels","showSuggestions","isLoading","isLoadingLabels","setShowSuggestions","sendStateToStreamlit","currentMode","boxesData","currentScale","selectedBoxId","arguments","length","undefined","currentBboxValue","payload","bboxes","save_requested","request_ocr","selectedBox","find","box","selected_box_id","selected_box_coords","setComponentValue","triggerStateSend","onDataFromPython","event","data","type","Array","isArray","setSuggestedLabels","setIsLoadingLabels","error","addEventListener","removeEventListener","selectedRect","handleLabelInputChange","newLabel","target","value","prev","initializeScale","scale_ratio","innerWidth","Math","min","updateFrameHeight","setFrameHeight","handleKeyPress","code","ctrlKey","preventDefault","setTimeout","filter","handleWheel","newScale","deltaY","max","passive","capture","formatScale","round","handleModeChange","newMode","handleSuggestionSelect","suggestedLabel","console","log","children","spacing","align","p","bg","color","borderRadius","position","top","left","transform","zIndex","boxShadow","fontWeight","borderWidth","justifyContent","alignItems","fontSize","mb","onChange","placeholder","size","borderColor","mr","colorScheme","variant","onClick","mt","strokeWidth"],"sources":["/Users/nongshim/Desktop/Python/project/streamlit_image_annotation_backup/Detection/frontend/src/Detection.tsx"],"sourcesContent":["// import {\n//   Streamlit,\n//   withStreamlitConnection,\n//   ComponentProps\n// } from \"streamlit-component-lib\"\n// import React, { useEffect, useState, useRef } from \"react\"\n// import { ChakraProvider, Input, Box, HStack, VStack, Center, Button, Text, Flex } from '@chakra-ui/react'\n// import { extendTheme } from '@chakra-ui/react';\n// import useImage from 'use-image';\n// import BBoxCanvas from \"./BBoxCanvas\";\n// import debounce from 'lodash/debounce';\n\n// const theme = extendTheme({\n//   config: {\n//     initialColorMode: 'light',\n//     useSystemColorMode: false,\n//   },\n// });\n\n// export interface PythonArgs {\n//   image_url: string,\n//   image_size: number[],\n//   bbox_info: any[],\n//   color_map: any,\n//   line_width: number,\n//   use_space: boolean,\n//   ocr_suggestions: string[]\n// }\n\n// interface Rectangle {\n//   x: number;\n//   y: number;\n//   width: number;\n//   height: number;\n//   label: string;\n//   stroke: string;\n//   id: string;\n// }\n\n// // 공통 bbox 포맷터 함수\n// const formatBBoxes = (rects: Rectangle[]) =>\n//   rects.map((rect) => ({\n//     box_id: rect.id,\n//     bbox: [rect.x, rect.y, rect.width, rect.height],\n//     label: rect.label || \"\",\n//   }));\n\n// const Detection = ({ args }: ComponentProps) => {\n//   const {\n//     image_url,\n//     image_size,\n//     bbox_info,\n//     color_map,\n//     line_width,\n//     use_space,\n//     ocr_suggestions\n//   }: PythonArgs = args\n\n//   const params = new URLSearchParams(window.location.search);\n//   const baseUrl = params.get('streamlitUrl')\n//   const [image] = useImage(baseUrl + image_url)\n\n//   const [rectangles, setRectangles] = useState<Rectangle[]>(\n//     bbox_info.map((bb, i) => ({\n//       x: bb.bbox[0],\n//       y: bb.bbox[1],\n//       width: bb.bbox[2],\n//       height: bb.bbox[3],\n//       label: bb.label,\n//       stroke: \"#39FF14\",\n//       id: 'bbox-' + i\n//     }))\n//   );\n  \n//   const [selectedId, setSelectedId] = useState<string | null>(null);\n//   const [label, setLabel] = useState(\"\"); \n//   const [mode, setMode] = useState<string>('Draw');\n//   const [isLabelEditMode, setIsLabelEditMode] = useState(false);\n//   const [scale, setScale] = useState(1.0);\n//   const [saveNotification, setSaveNotification] = useState(false);\n//   const [showLabels, setShowLabels] = useState(false);\n//   const [suggestedLabels, setSuggestedLabels] = useState<string[]>([]);\n//   const [isLoadingLabels, setIsLoadingLabels] = useState(false);\n//   const [showSuggestions, setShowSuggestions] = useState(false);\n//   const pendingOCRRequestRef = useRef(false);\n//   const [ocrTrigger, setOcrTrigger] = useState<string | null>(null);\n//   const prevTriggerRef = useRef<string | null>(null);\n\n//   useEffect(() => {\n//     if (\n//       ocr_suggestions && \n//       ocr_suggestions.length > 0 &&\n//       JSON.stringify(ocr_suggestions) !== JSON.stringify(suggestedLabels)\n//     ) {\n//       console.log(\"📥 OCR 응답 수신:\", ocr_suggestions);\n//       setSuggestedLabels(ocr_suggestions);\n//       setIsLoadingLabels(false);\n//       setShowSuggestions(true);\n//       pendingOCRRequestRef.current = false; // ✅ OCR 응답 도착 시 요청 가능 상태로 복구\n//     }\n//   }, [ocr_suggestions]);\n\n//   const sendStateToStreamlit = (currentMode: string, boxesData: Rectangle[], currentScale: number, selectedBoxId: string | null = null) => {\n//     console.log(\"📤 sendStateToStreamlit 호출됨\", {\n//       mode: currentMode,\n//       request_ocr: false,\n//       selected_box_id: selectedBoxId\n//     });\n\n//     if (pendingOCRRequestRef.current) return; // 🔒 OCR 중이면 skip\n\n//     const currentBboxValue = formatBBoxes(boxesData);\n\n//     if (selectedBoxId !== null) {\n//       const selectedBox = boxesData.find(box => box.id === selectedBoxId);\n//       if (!selectedBox) return;\n\n//       Streamlit.setComponentValue({\n//         mode: currentMode,\n//         bboxes: currentBboxValue,\n//         scale: currentScale,\n//         save_requested: false,\n//         request_ocr: false,\n//         selected_box_id: selectedBoxId,\n//         selected_box_coords: [selectedBox.x, selectedBox.y, selectedBox.width, selectedBox.height]\n//       });\n//     } else {\n//       Streamlit.setComponentValue({\n//         mode: currentMode,\n//         bboxes: currentBboxValue,\n//         scale: currentScale,\n//         save_requested: false\n//       });\n//     }\n//   };\n\n\n//   console.log(\"🔒 pendingOCRRequestRef 상태:\", pendingOCRRequestRef.current);\n\n//   useEffect(() => {\n//     const onDataFromPython = (event: MessageEvent) => {\n//       if (event.data.type === 'streamlit:render') {\n//         try {\n//           const args = event.data.args;\n//           if (args?.ocr_suggestions && Array.isArray(args.ocr_suggestions)) {\n//             console.log(\"📥 OCR 응답 수신:\", args.ocr_suggestions);\n//             setSuggestedLabels(args.ocr_suggestions);\n//             setIsLoadingLabels(false);\n//             setShowSuggestions(true);\n//             pendingOCRRequestRef.current = false;\n//           }\n//         } catch (error) {\n//           console.error(\"❌ OCR 응답 처리 중 오류:\", error);\n//           pendingOCRRequestRef.current = false;\n//         }\n//       }\n//     };\n//     window.addEventListener('message', onDataFromPython);\n//     return () => window.removeEventListener('message', onDataFromPython);\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedId) {\n//       const selectedRect = rectangles.find(rect => rect.id === selectedId);\n//       if (selectedRect) {\n//         setLabel(selectedRect.label);\n//       }\n//     }\n//   }, [selectedId, rectangles]);\n  \n//   const handleLabelInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     const newLabel = event.target.value;\n//     setLabel(newLabel);\n//     if (selectedId !== null) {\n//       setRectangles((prev) =>\n//         prev.map((rect) =>\n//           rect.id === selectedId ? { ...rect, label: newLabel, stroke: \"#39FF14\" } : rect\n//         )\n//       );\n//     }\n//   };\n\n//   useEffect(() => {\n//     const initializeScale = () => {\n//       if (scale === 1.0 && image_size[0] > 0) {\n//         const scale_ratio = window.innerWidth * 0.8 / image_size[0];\n//         setScale(Math.min(scale_ratio, 1.0));\n//       }\n//     };\n//     const updateFrameHeight = () => {\n//       if (image_size[1] > 0) {\n//         Streamlit.setFrameHeight(image_size[1] * scale + 100);\n//       }\n//     };\n//     initializeScale();\n//     updateFrameHeight();\n//     window.addEventListener('resize', updateFrameHeight);\n//     return () => {\n//       window.removeEventListener('resize', updateFrameHeight);\n//     };\n//   }, [image_size, scale]);\n\n//   useEffect(() => {\n//     const handleKeyPress = (event: KeyboardEvent) => {\n//       if (use_space && event.code === \"Space\") {\n//         sendStateToStreamlit(mode, rectangles, scale);  \n//       }\n//       if (event.ctrlKey && event.code === \"KeyE\") {\n//         event.preventDefault();\n//         setMode(\"Edit\");\n//       }\n//       if (event.ctrlKey && event.code === \"KeyD\") {\n//         event.preventDefault();\n//         setMode(\"Draw\");\n//       }\n//       if (event.ctrlKey && event.code === \"KeyL\") {\n//         event.preventDefault();\n//         if (selectedId) {\n//           setIsLabelEditMode(true);\n//           setShowSuggestions(true);\n//           setIsLoadingLabels(false);\n//         }\n//       }\n      \n//       if (event.ctrlKey && event.code === \"KeyM\") {\n//         event.preventDefault();\n//         if (selectedId) {\n//           console.log(\"🆕 Ctrl+M pressed → OCR 요청 트리거\");\n//           setIsLoadingLabels(true);\n//           setOcrTrigger(selectedId);  // 👈 여기서만 트리거\n//         }\n//       }\n      \n//       if (event.ctrlKey && event.code === \"KeyR\") {\n//         event.preventDefault();\n//         setShowLabels(prev => !prev);\n//       }\n//       if (event.ctrlKey && event.code === \"KeyS\") {\n//         event.preventDefault();\n//         setSaveNotification(true);\n//         setTimeout(() => {\n//           setSaveNotification(false);\n//         }, 3000);\n//         Streamlit.setComponentValue({\n//           mode,\n//           bboxes: formatBBoxes(rectangles),\n//           scale,\n//           save_requested: true\n//         });\n//       }\n//       if (event.code === \"Delete\" && selectedId) {\n//         event.preventDefault();\n//         setRectangles((prev) => prev.filter((rect) => rect.id !== selectedId));\n//         setSelectedId(null);\n//         setIsLabelEditMode(false);\n//       }\n//       if (event.code === \"Escape\") {\n//         event.preventDefault();\n//         if (isLabelEditMode) {\n//           setIsLabelEditMode(false);\n//         } else if (selectedId) {\n//           setSelectedId(null);\n//         }\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyPress);\n//     return () => {\n//       window.removeEventListener(\"keydown\", handleKeyPress);\n//     };\n//   }, [rectangles, use_space, selectedId, isLabelEditMode, mode]);\n\n//   useEffect(() => {\n//     const handleWheel = (event: WheelEvent) => {\n//       if (event.ctrlKey) {\n//         event.preventDefault();\n//         let newScale = scale + (event.deltaY < 0 ? 0.1 : -0.1);\n//         newScale = Math.min(Math.max(newScale, 0.5), 3.0);\n//         setScale(newScale);\n//       }\n//     };\n//     window.addEventListener('wheel', handleWheel, { passive: false, capture: true });\n//   }, [scale]);\n\n//   const formatScale = (scale: number) => `${Math.round(scale * 100)}%`;\n\n//   const handleModeChange = (newMode: string) => {\n//     setMode(newMode);\n//     sendStateToStreamlit(newMode, rectangles, scale);\n//   };\n\n//   const handleSuggestionSelect = (suggestedLabel: string) => {\n//     setLabel(suggestedLabel);\n//     if (selectedId !== null) {\n//       setRectangles((prev) =>\n//         prev.map((rect) =>\n//           rect.id === selectedId ? { ...rect, label: suggestedLabel, stroke: \"#39FF14\" } : rect\n//         )\n//       );\n//     }\n//     setShowSuggestions(false);\n//   };\n\n//   useEffect(() => {\n//     if (!ocrTrigger || ocrTrigger === prevTriggerRef.current) return;\n//     prevTriggerRef.current = ocrTrigger;\n\n//     const selectedBox = rectangles.find(rect => rect.id === ocrTrigger);\n//     if (!selectedBox) return;\n\n//     if (pendingOCRRequestRef.current) {\n//       console.log(\"🔁 이미 OCR 요청 중입니다. 요청 무시됨.\");\n//       return;\n//     }\n  \n//     console.log(\"📤 OCR 요청 실행:\", ocrTrigger);\n//     pendingOCRRequestRef.current = true;\n  \n//     Streamlit.setComponentValue({\n//       mode,\n//       bboxes: formatBBoxes(rectangles),\n//       scale,\n//       request_ocr: true,\n//       selected_box_id: ocrTrigger,\n//       selected_box_coords: [selectedBox.x, selectedBox.y, selectedBox.width, selectedBox.height]\n//     });\n  \n//     // 요청 후 트리거 리셋\n//     setOcrTrigger(null);\n//   }, [ocrTrigger]);\n  \n  \n//   return (\n//     <ChakraProvider theme={theme}>\n//       <VStack spacing={4} align=\"stretch\">\n//         {saveNotification && (\n//           <Box \n//             p={3} \n//             bg=\"green.100\" \n//             color=\"green.800\" \n//             borderRadius=\"md\" \n//             position=\"fixed\" \n//             top=\"20px\" \n//             left=\"50%\" \n//             transform=\"translateX(-50%)\" \n//             zIndex={100}\n//             boxShadow=\"md\"\n//           >\n//             <Text fontWeight=\"bold\">\n//               <span role=\"img\" aria-label=\"save\">💾</span> 어노테이션 저장 요청이 전송되었습니다!\n//             </Text>\n//           </Box>\n//         )}\n\n//         <Box \n//           p={3} \n//           bg=\"gray.200\" \n//           borderRadius=\"md\" \n//           position=\"sticky\" \n//           top={0} \n//           zIndex={10}\n//           borderWidth=\"1px\"\n//           boxShadow=\"sm\"\n//         >\n//           <Flex justifyContent=\"space-between\" alignItems=\"center\">\n//             <HStack spacing={4}>\n//               <Box>\n//                 <Text fontSize=\"sm\" mb={1} color=\"black\">Class</Text>\n//                 <Input \n//                   value={label} \n//                   onChange={handleLabelInputChange} \n//                   placeholder=\"Enter label\"\n//                   size=\"sm\"\n//                   width=\"200px\"\n//                   bg=\"white\"\n//                   borderColor=\"gray.200\"\n//                 />\n//               </Box>\n//             </HStack>\n\n//             <HStack>\n//               <Text fontSize=\"sm\" mr={2} color=\"black\">Zoom: {formatScale(scale)}</Text>\n//               <Button size=\"sm\" colorScheme=\"teal\" variant={showLabels ? \"solid\" : \"outline\"} onClick={() => setShowLabels(prev => !prev)}>\n//                 {showLabels ? \"Hide Labels\" : \"Show Labels\"}\n//               </Button>\n//               <Button size=\"sm\" colorScheme=\"green\" variant={mode === \"Draw\" ? \"solid\" : \"outline\"} onClick={() => handleModeChange(\"Draw\")}>\n//                 Draw\n//               </Button>\n//               <Button size=\"sm\" colorScheme=\"blue\" variant={mode === \"Edit\" ? \"solid\" : \"outline\"} onClick={() => handleModeChange(\"Edit\")}>\n//                 Edit\n//               </Button>\n//               <Button size=\"sm\" colorScheme=\"purple\" onClick={() => {\n//                 setSaveNotification(true);\n//                 setTimeout(() => setSaveNotification(false), 3000);\n//                 Streamlit.setComponentValue({\n//                   mode,\n//                   bboxes: formatBBoxes(rectangles),\n//                   scale,\n//                   save_requested: true\n//                 });\n//               }}>\n//                 Save\n//               </Button>\n//             </HStack>\n//           </Flex>\n\n//           <Flex mt={2} justifyContent=\"space-between\" alignItems=\"center\">\n//             <Text fontSize=\"xs\" color=\"black\">Selected Items: {rectangles.length}</Text>\n//           </Flex>\n//         </Box>\n\n//         <Box>\n//           <Center>\n//             <BBoxCanvas\n//               rectangles={rectangles}\n//               mode={mode}\n//               selectedId={selectedId}\n//               scale={scale}\n//               setSelectedId={setSelectedId}\n//               setRectangles={setRectangles}\n//               setLabel={setLabel}\n//               color_map={color_map}\n//               label={label}\n//               image={image}\n//               image_size={image_size}\n//               strokeWidth={line_width}\n//               isLabelEditMode={isLabelEditMode}\n//               setIsLabelEditMode={setIsLabelEditMode}\n//               handleLabelInputChange={handleLabelInputChange}\n//               showLabels={showLabels}\n//               suggestedLabels={suggestedLabels}\n//               showSuggestions={showSuggestions}\n//               setShowSuggestions={setShowSuggestions}\n//               handleSuggestionSelect={handleSuggestionSelect}\n//               isLoadingLabels={isLoadingLabels}\n//             />\n//           </Center>\n//         </Box>\n//       </VStack>\n//     </ChakraProvider>\n//   );\n// };\n\n// export default withStreamlitConnection(Detection);\n\n\n\n// ✅ Detection.tsx 최종 버전 (무한 루프 방지 + 수동 상태 전송 적용)\nimport {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps\n} from \"streamlit-component-lib\"\nimport React, { useEffect, useState, useRef } from \"react\"\nimport { ChakraProvider, Input, Box, HStack, VStack, Center, Button, Text, Flex } from '@chakra-ui/react'\nimport { extendTheme } from '@chakra-ui/react';\nimport useImage from 'use-image';\nimport BBoxCanvas from \"./BBoxCanvas\";\n// 상단 import에 추가\nimport { useOcrManager } from \"./useOcrManager\";\n\n\n\n\n\nconst theme = extendTheme({\n  config: {\n    initialColorMode: 'light',\n    useSystemColorMode: false,\n  },\n});\n\nexport interface PythonArgs {\n  image_url: string,\n  image_size: number[],\n  bbox_info: any[],\n  color_map: any,\n  line_width: number,\n  use_space: boolean,\n  ocr_suggestions: string[],\n  request_ocr?: boolean\n}\n\ninterface Rectangle {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  label: string;\n  stroke: string;\n  id: string;\n}\n\nconst formatBBoxes = (rects: Rectangle[]) =>\n  rects.map((rect) => ({\n    box_id: rect.id,\n    bbox: [rect.x, rect.y, rect.width, rect.height],\n    label: rect.label || \"\",\n  }));\n\nconst Detection = ({ args }: ComponentProps) => {\n  const {\n    image_url,\n    image_size,\n    bbox_info,\n    color_map,\n    line_width,\n    use_space,\n    ocr_suggestions\n  }: PythonArgs = args\n\n  const params = new URLSearchParams(window.location.search);\n  const baseUrl = params.get('streamlitUrl');\n  const [image] = useImage(baseUrl + image_url);\n\n  const [rectangles, setRectangles] = useState<Rectangle[]>(\n    bbox_info.map((bb, i) => ({\n      x: bb.bbox[0],\n      y: bb.bbox[1],\n      width: bb.bbox[2],\n      height: bb.bbox[3],\n      label: bb.label,\n      stroke: \"#39FF14\",\n      id: 'bbox-' + i\n    }))\n  );\n  \n\n  const [selectedId, setSelectedId] = useState<string | null>(null);\n  const [label, setLabel] = useState(\"\");\n  const [mode, setMode] = useState<string>('Draw');\n  const [isLabelEditMode, setIsLabelEditMode] = useState(false);\n  const [scale, setScale] = useState(1.0);\n  const [saveNotification, setSaveNotification] = useState(false);\n  const [showLabels, setShowLabels] = useState(false);\n  // const [suggestedLabels, setSuggestedLabels] = useState<string[]>([]);\n  // const [isLoadingLabels, setIsLoadingLabels] = useState(false);\n  // const [showSuggestions, setShowSuggestions] = useState(false);\n\n  // 컴포넌트 내부에서 훅 호출\n  const {\n    requestOcrForBox,\n    handleOcrResponse,\n    resetOcrState,\n    suggestedLabels,\n    showSuggestions,\n    isLoading: isLoadingLabels,\n    setShowSuggestions\n  } = useOcrManager({ rectangles, scale, mode });\n  // const pendingOCRRequestRef = useRef(false);\n  // const [ocrTrigger, setOcrTrigger] = useState<string | null>(null);\n  // const prevTriggerRef = useRef<string | null>(null);\n\n  // const sendStateToStreamlit = (currentMode: string, boxesData: Rectangle[], currentScale: number, selectedBoxId: string | null = null) => {\n  //   if (pendingOCRRequestRef.current) return;\n  //   const currentBboxValue = formatBBoxes(boxesData);\n\n  //   const payload: any = {\n  //     mode: currentMode,\n  //     bboxes: currentBboxValue,\n  //     scale: currentScale,\n  //     save_requested: false,\n  //     request_ocr: false\n  //   };\n\n  //   if (selectedBoxId !== null) {\n  //     const selectedBox = boxesData.find(box => box.id === selectedBoxId);\n  //     if (selectedBox) {\n  //       payload.selected_box_id = selectedBoxId;\n  //       payload.selected_box_coords = [\n  //         selectedBox.x,\n  //         selectedBox.y,\n  //         selectedBox.width,\n  //         selectedBox.height\n  //       ];\n  //     }\n  //   }\n\n  //   Streamlit.setComponentValue(payload);\n  // };\n  const sendStateToStreamlit = (\n    currentMode: string,\n    boxesData: Rectangle[],\n    currentScale: number,\n    selectedBoxId: string | null = null\n  ) => {\n    const currentBboxValue = formatBBoxes(boxesData);\n  \n    const payload: any = {\n      mode: currentMode,\n      bboxes: currentBboxValue,\n      scale: currentScale,\n      save_requested: false,\n      request_ocr: false\n    };\n  \n    if (selectedBoxId !== null) {\n      const selectedBox = boxesData.find(box => box.id === selectedBoxId);\n      if (selectedBox) {\n        payload.selected_box_id = selectedBoxId;\n        payload.selected_box_coords = [\n          selectedBox.x,\n          selectedBox.y,\n          selectedBox.width,\n          selectedBox.height\n        ];\n      }\n    }\n  \n    Streamlit.setComponentValue(payload);\n  };\n  \n\n  const triggerStateSend = () => {\n    sendStateToStreamlit(mode, rectangles, scale, selectedId);\n  };\n\n  // useEffect(() => {\n  //   if (\n  //     ocr_suggestions &&\n  //     ocr_suggestions.length > 0 &&\n  //     JSON.stringify(ocr_suggestions) !== JSON.stringify(suggestedLabels)\n  //   ) {\n  //     setSuggestedLabels(ocr_suggestions);\n  //     setIsLoadingLabels(false);\n  //     setShowSuggestions(true);\n  //     // pendingOCRRequestRef.current = false;\n  //     // setOcrTrigger(null); // ✅ 혹시라도 다시 반복되는 걸 방지\n  //   }\n  // }, [ocr_suggestions]);\n  \n  useEffect(() => {\n    if (args.ocr_suggestions && args.ocr_suggestions.length > 0) {\n      handleOcrResponse(args.ocr_suggestions);\n    }\n  }, [args.ocr_suggestions]);\n\n  useEffect(() => {\n    const onDataFromPython = (event: MessageEvent) => {\n      if (event.data.type === 'streamlit:render') {\n        try {\n          const args = event.data.args;\n          if (args?.ocr_suggestions && Array.isArray(args.ocr_suggestions)) {\n            setSuggestedLabels(args.ocr_suggestions);\n            setIsLoadingLabels(false);\n            setShowSuggestions(true);\n            // pendingOCRRequestRef.current = false;\n          }\n        } catch (error) {\n          // pendingOCRRequestRef.current = false;\n        }\n      }\n    };\n    window.addEventListener('message', onDataFromPython);\n    return () => window.removeEventListener('message', onDataFromPython);\n  }, []);\n\n  // useEffect(() => {\n  //   if (!ocrTrigger || ocrTrigger === prevTriggerRef.current) return;\n  //   prevTriggerRef.current = ocrTrigger;\n  \n  //   const selectedBox = rectangles.find(rect => rect.id === ocrTrigger);\n  //   if (!selectedBox) return;\n  \n  //   if (pendingOCRRequestRef.current) return;\n  \n  //   pendingOCRRequestRef.current = true;\n  \n  //   Streamlit.setComponentValue({\n  //     mode,\n  //     bboxes: formatBBoxes(rectangles),\n  //     scale,\n  //     request_ocr: true,\n  //     selected_box_id: ocrTrigger,\n  //     selected_box_coords: [\n  //       selectedBox.x,\n  //       selectedBox.y,\n  //       selectedBox.width,\n  //       selectedBox.height\n  //     ]\n  //   });\n  \n  //   // ✅ 트리거 초기화 반드시 포함\n  //   setOcrTrigger(null);\n  //   prevTriggerRef.current = null;\n  // }, [ocrTrigger]);\n  \n\n  // useEffect(() => {\n  //   console.log(\"🔍 [useEffect] args.request_ocr =\", args.request_ocr);\n  //   if (args.request_ocr === false || args.request_ocr === undefined) {\n  //     pendingOCRRequestRef.current = false;\n  //     prevTriggerRef.current = null;       // ✅ OCR 재트리거 방지\n  //     setOcrTrigger(null);                 // ✅ OCR 트리거도 초기화\n  //     console.log(\"🧹 OCR 요청 상태 리셋\");\n  //   }\n  // }, [args.request_ocr]);\n  \n  useEffect(() => {\n    if (args.request_ocr === false || args.request_ocr === undefined) {\n      resetOcrState();\n    }\n  }, [args.request_ocr]);\n\n  useEffect(() => {\n    if (selectedId) {\n      const selectedRect = rectangles.find(rect => rect.id === selectedId);\n      if (selectedRect) {\n        setLabel(selectedRect.label);\n      }\n    }\n  }, [selectedId, rectangles]);\n\n  const handleLabelInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newLabel = event.target.value;\n    setLabel(newLabel);\n    if (selectedId !== null) {\n      setRectangles((prev) =>\n        prev.map((rect) =>\n          rect.id === selectedId ? { ...rect, label: newLabel, stroke: \"#39FF14\" } : rect\n        )\n      );\n    }\n  };\n\n  useEffect(() => {\n    const initializeScale = () => {\n      if (scale === 1.0 && image_size[0] > 0) {\n        const scale_ratio = window.innerWidth * 0.8 / image_size[0];\n        setScale(Math.min(scale_ratio, 1.0));\n      }\n    };\n    const updateFrameHeight = () => {\n      if (image_size[1] > 0) {\n        Streamlit.setFrameHeight(image_size[1] * scale + 100);\n      }\n    };\n    initializeScale();\n    updateFrameHeight();\n    window.addEventListener('resize', updateFrameHeight);\n    return () => {\n      window.removeEventListener('resize', updateFrameHeight);\n    };\n  }, [image_size, scale]);\n\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (use_space && event.code === \"Space\") {\n        triggerStateSend();\n      }\n      if (event.ctrlKey && event.code === \"KeyE\") {\n        event.preventDefault();\n        setMode(\"Edit\");\n        triggerStateSend();\n      }\n      if (event.ctrlKey && event.code === \"KeyD\") {\n        event.preventDefault();\n        setMode(\"Draw\");\n        triggerStateSend();\n      }\n      if (event.ctrlKey && event.code === \"KeyL\") {\n        event.preventDefault();\n        if (selectedId) {\n          setIsLabelEditMode(true);\n          setShowSuggestions(true);\n          setIsLoadingLabels(false);\n        }\n      }\n\n      if (event.ctrlKey && event.code === \"KeyM\") {\n        event.preventDefault();\n        if (selectedId) {\n          requestOcrForBox(selectedId);\n        }\n      }\n      \n\n      \n      if (event.ctrlKey && event.code === \"KeyR\") {\n        event.preventDefault();\n        setShowLabels(prev => !prev);\n      }\n      if (event.ctrlKey && event.code === \"KeyS\") {\n        event.preventDefault();\n        setSaveNotification(true);\n        setTimeout(() => {\n          setSaveNotification(false);\n        }, 3000);\n        Streamlit.setComponentValue({\n          mode,\n          bboxes: formatBBoxes(rectangles),\n          scale,\n          save_requested: true\n        });\n      }\n      if (event.code === \"Delete\" && selectedId) {\n        event.preventDefault();\n        setRectangles((prev) => prev.filter((rect) => rect.id !== selectedId));\n        setSelectedId(null);\n        setIsLabelEditMode(false);\n      }\n      if (event.code === \"Escape\") {\n        event.preventDefault();\n        if (isLabelEditMode) {\n          setIsLabelEditMode(false);\n        } else if (selectedId) {\n          setSelectedId(null);\n        }\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [rectangles, use_space, selectedId, isLabelEditMode, mode]);\n\n  useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      if (event.ctrlKey) {\n        event.preventDefault();\n        let newScale = scale + (event.deltaY < 0 ? 0.1 : -0.1);\n        newScale = Math.min(Math.max(newScale, 0.5), 3.0);\n        setScale(newScale);\n      }\n    };\n    window.addEventListener('wheel', handleWheel, { passive: false, capture: true });\n    return () => {\n      window.removeEventListener('wheel', handleWheel);\n    };\n  }, [scale]);\n\n  const formatScale = (scale: number) => `${Math.round(scale * 100)}%`;\n\n  const handleModeChange = (newMode: string) => {\n    setMode(newMode);\n    triggerStateSend();\n  };\n\n  const handleSuggestionSelect = (suggestedLabel: string) => {\n    setLabel(suggestedLabel);\n    if (selectedId !== null) {\n      setRectangles((prev) =>\n        prev.map((rect) =>\n          rect.id === selectedId ? { ...rect, label: suggestedLabel, stroke: \"#39FF14\" } : rect\n        )\n      );\n    }\n    setShowSuggestions(false);\n  };\n\n  useEffect(() => {\n    console.log(\"🔍 [args.request_ocr] =\", args.request_ocr);\n  }, [args.request_ocr]);\n\n  \n  return (\n    <ChakraProvider theme={theme}>\n      <VStack spacing={4} align=\"stretch\">\n        {saveNotification && (\n          <Box p={3} bg=\"green.100\" color=\"green.800\" borderRadius=\"md\" position=\"fixed\" top=\"20px\" left=\"50%\" transform=\"translateX(-50%)\" zIndex={100} boxShadow=\"md\">\n            <Text fontWeight=\"bold\">💾 어노테이션 저장 요청이 전송되었습니다!</Text>\n          </Box>\n        )}\n\n        <Box p={3} bg=\"gray.200\" borderRadius=\"md\" position=\"sticky\" top={0} zIndex={10} borderWidth=\"1px\" boxShadow=\"sm\">\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <HStack spacing={4}>\n              <Box>\n                <Text fontSize=\"sm\" mb={1} color=\"black\">Class</Text>\n                <Input value={label} onChange={handleLabelInputChange} placeholder=\"Enter label\" size=\"sm\" width=\"200px\" bg=\"white\" borderColor=\"gray.200\" />\n              </Box>\n            </HStack>\n\n            <HStack>\n              <Text fontSize=\"sm\" mr={2} color=\"black\">Zoom: {formatScale(scale)}</Text>\n              <Button size=\"sm\" colorScheme=\"teal\" variant={showLabels ? \"solid\" : \"outline\"} onClick={() => setShowLabels(prev => !prev)}>\n                {showLabels ? \"Hide Labels\" : \"Show Labels\"}\n              </Button>\n              <Button size=\"sm\" colorScheme=\"green\" variant={mode === \"Draw\" ? \"solid\" : \"outline\"} onClick={() => handleModeChange(\"Draw\")}>Draw</Button>\n              <Button size=\"sm\" colorScheme=\"blue\" variant={mode === \"Edit\" ? \"solid\" : \"outline\"} onClick={() => handleModeChange(\"Edit\")}>Edit</Button>\n              <Button size=\"sm\" colorScheme=\"purple\" onClick={() => {\n                setSaveNotification(true);\n                setTimeout(() => setSaveNotification(false), 3000);\n                Streamlit.setComponentValue({\n                  mode,\n                  bboxes: formatBBoxes(rectangles),\n                  scale,\n                  save_requested: true\n                });\n              }}>\n                Save\n              </Button>\n            </HStack>\n          </Flex>\n\n          <Flex mt={2} justifyContent=\"space-between\" alignItems=\"center\">\n            <Text fontSize=\"xs\" color=\"black\">Selected Items: {rectangles.length}</Text>\n          </Flex>\n        </Box>\n\n        <Box>\n          <Center>\n            <BBoxCanvas\n              rectangles={rectangles}\n              mode={mode}\n              selectedId={selectedId}\n              scale={scale}\n              setSelectedId={setSelectedId}\n              setRectangles={setRectangles}\n              setLabel={setLabel}\n              color_map={color_map}\n              label={label}\n              image={image}\n              image_size={image_size}\n              strokeWidth={line_width}\n              isLabelEditMode={isLabelEditMode}\n              setIsLabelEditMode={setIsLabelEditMode}\n              handleLabelInputChange={handleLabelInputChange}\n              showLabels={showLabels}\n              suggestedLabels={suggestedLabels}\n              showSuggestions={showSuggestions}\n              setShowSuggestions={setShowSuggestions}\n              handleSuggestionSelect={handleSuggestionSelect}\n              isLoadingLabels={isLoadingLabels}\n            />\n          </Center>\n        </Box>\n      </VStack>\n    </ChakraProvider>\n  );\n};\n\nexport default withStreamlitConnection(Detection);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA,OACEA,SAAS,CACTC,uBAAuB,KAElB,yBAAyB,CAChC,MAAO,CAAAC,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAgB,OAAO,CAC1D,OAASC,cAAc,CAAEC,KAAK,CAAEC,GAAG,CAAEC,MAAM,CAAEC,MAAM,CAAEC,MAAM,CAAEC,MAAM,CAAEC,IAAI,CAAEC,IAAI,KAAQ,kBAAkB,CACzG,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,QAAQ,KAAM,WAAW,CAChC,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC;AACA,OAASC,aAAa,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,I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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}